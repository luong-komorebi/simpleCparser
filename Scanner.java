/* The following code was generated by JFlex 1.4.3 on 12/27/17 10:53 PM */

import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/27/17 10:53 PM from the specification file
 * <tt>SimpleC.lex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\102\1\24"+
    "\1\105\1\0\1\76\1\77\1\26\1\62\1\63\1\23\1\74\1\71"+
    "\1\7\1\17\1\22\1\13\7\16\2\6\1\70\1\70\1\72\1\75"+
    "\1\73\1\104\1\0\1\46\3\15\1\20\1\21\5\4\1\12\1\4"+
    "\1\61\3\4\1\45\1\47\1\44\1\10\2\4\1\14\2\4\1\66"+
    "\1\25\1\67\1\100\1\4\1\0\1\43\1\33\1\51\1\40\1\36"+
    "\1\41\1\54\1\52\1\30\1\4\1\50\1\11\1\53\1\31\1\34"+
    "\1\60\1\4\1\35\1\42\1\32\1\37\1\5\1\56\1\27\1\57"+
    "\1\55\1\64\1\101\1\65\1\103\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\2\1\4\1\5\2\3"+
    "\1\4\1\6\1\3\1\7\1\10\2\1\20\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\3\3\4\1\35\1\0\1\35"+
    "\1\36\1\0\1\37\1\40\1\3\2\0\1\35\1\4"+
    "\2\0\1\3\1\41\1\0\1\42\1\43\1\44\3\0"+
    "\1\3\1\45\12\3\1\46\20\3\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\2\3\1\4\1\35\1\0\1\3"+
    "\1\4\1\65\1\3\1\0\1\66\1\0\1\67\17\3"+
    "\1\70\17\3\1\71\1\72\1\3\1\73\1\74\1\3"+
    "\1\75\1\76\1\77\1\3\1\100\3\3\1\101\1\3"+
    "\1\102\14\3\1\103\2\3\1\104\1\105\1\106\2\3"+
    "\1\107\1\3\1\110\3\3\1\111\3\3\1\112\4\3"+
    "\1\113\2\3\1\114\1\115\2\3\1\116\1\3\1\117"+
    "\1\3\1\120\1\3\1\121\1\122\1\123\1\124\1\125"+
    "\2\3\1\126\2\3\1\127\1\3\1\130\1\131\1\132"+
    "\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\106\0\106\0\106\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\106\0\106\0\u0cda\0\106\0\106"+
    "\0\u0d20\0\u03d4\0\u041a\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\106\0\106\0\106\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\322\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\106\0\u1810"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\u1856\0\u189c\0\106\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\106\0\u19fa\0\u1a40\0\106\0\u1a86\0\322"+
    "\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\322"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\106"+
    "\0\106\0\u2300\0\322\0\322\0\u2346\0\106\0\322\0\322"+
    "\0\u238c\0\322\0\u23d2\0\u2418\0\u245e\0\322\0\u24a4\0\322"+
    "\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4"+
    "\0\u271a\0\u2760\0\u27a6\0\u27ec\0\322\0\u2832\0\u2878\0\322"+
    "\0\322\0\322\0\u28be\0\u2904\0\322\0\u294a\0\322\0\u2990"+
    "\0\u29d6\0\u2a1c\0\322\0\u2a62\0\u2aa8\0\u2aee\0\322\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\322\0\u2c4c\0\u2c92\0\322\0\322"+
    "\0\u2cd8\0\u2d1e\0\322\0\u2d64\0\322\0\u2daa\0\322\0\u2df0"+
    "\0\322\0\322\0\322\0\322\0\322\0\u2e36\0\u2e7c\0\322"+
    "\0\u2ec2\0\u2f08\0\322\0\u2f4e\0\322\0\322\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\12\1\13\2\5\1\7\1\14\1\5\1\15"+
    "\1\16\1\17\1\20\1\2\1\21\1\5\1\22\1\23"+
    "\1\24\1\25\1\5\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\4\5\1\36\2\5\1\37\1\5"+
    "\1\40\2\5\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\110\0"+
    "\1\4\107\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\33\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\5\5\1\66\25\5\32\0\1\7\1\0\1\67\1\70"+
    "\1\71\1\7\2\0\1\7\1\72\1\73\1\74\14\0"+
    "\1\73\1\67\1\0\1\74\52\0\1\7\1\75\3\0"+
    "\1\13\2\0\1\7\1\76\53\0\1\77\1\0\1\100"+
    "\14\0\3\5\1\0\7\5\1\0\2\5\5\0\5\5"+
    "\1\101\25\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\2\0\1\102\1\0\1\103\33\5\32\0\1\104\1\0"+
    "\1\67\1\70\1\71\1\105\1\106\1\0\1\105\1\72"+
    "\1\73\1\74\5\0\1\106\6\0\1\73\1\67\1\0"+
    "\1\74\52\0\1\72\4\0\1\72\2\0\1\72\1\107"+
    "\72\0\3\5\1\0\7\5\1\0\2\5\5\0\17\5"+
    "\1\110\13\5\46\0\1\111\1\112\51\0\1\113\105\0"+
    "\1\114\10\0\24\102\1\115\1\116\60\102\1\117\2\0"+
    "\22\117\1\120\1\0\57\117\4\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\2\5\1\121\7\5\1\122\20\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\10\5"+
    "\1\123\22\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\6\5\1\124\21\5\1\125\2\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\5\5\1\126\1\127"+
    "\24\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\7\5\1\130\23\5\30\0\3\5\1\0\1\5\1\131"+
    "\5\5\1\0\2\5\5\0\1\132\1\5\1\133\30\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\2\5"+
    "\1\134\30\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\5\5\1\135\1\5\1\136\23\5\30\0\3\5"+
    "\1\0\1\5\1\137\5\5\1\0\2\5\5\0\5\5"+
    "\1\140\6\5\1\141\16\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\5\1\142\1\5\1\143\17\5"+
    "\1\144\3\5\1\145\3\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\10\5\1\146\22\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\16\5\1\147\14\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\5\5"+
    "\1\150\6\5\1\151\6\5\1\152\7\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\5\5\1\153\25\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\23\5"+
    "\1\154\7\5\30\0\3\5\1\0\1\155\6\5\1\0"+
    "\2\5\5\0\33\5\116\0\1\156\2\0\1\157\103\0"+
    "\1\160\1\0\1\161\16\0\1\7\4\0\1\13\2\0"+
    "\1\7\1\76\54\0\1\162\1\163\105\0\1\164\105\0"+
    "\1\165\105\0\1\166\1\0\1\167\103\0\1\170\105\0"+
    "\1\171\3\0\1\172\101\0\1\173\14\0\3\5\1\0"+
    "\1\5\1\174\5\5\1\0\2\5\5\0\1\5\1\175"+
    "\31\5\35\0\1\70\1\71\104\0\1\176\106\0\1\176"+
    "\101\0\1\72\2\0\2\74\1\72\2\0\1\72\1\0"+
    "\1\73\1\74\14\0\1\73\2\0\1\74\52\0\1\177"+
    "\1\200\3\0\1\177\2\0\1\177\55\0\1\200\17\0"+
    "\1\72\4\0\1\72\2\0\1\72\73\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\2\5\1\201\30\5\32\0"+
    "\1\104\2\0\2\74\1\104\2\0\1\104\1\72\1\73"+
    "\1\74\14\0\1\73\2\0\1\74\52\0\1\104\1\0"+
    "\1\67\1\70\1\71\1\105\2\0\1\105\1\72\1\73"+
    "\1\74\14\0\1\73\1\67\1\0\1\74\52\0\1\202"+
    "\4\0\1\202\1\0\2\202\1\0\2\202\11\0\1\202"+
    "\2\0\1\202\1\0\2\202\1\0\1\202\2\0\1\202"+
    "\2\0\1\202\53\0\1\203\72\0\3\5\1\0\2\5"+
    "\1\204\4\5\1\0\2\5\5\0\33\5\24\0\1\111"+
    "\2\0\103\111\23\112\1\205\62\112\2\102\1\0\103\102"+
    "\1\117\2\0\22\117\1\120\1\206\60\117\2\0\24\117"+
    "\1\207\56\117\4\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\3\5\1\210\27\5\30\0\3\5\1\0\1\5"+
    "\1\211\5\5\1\0\2\5\5\0\33\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\10\5\1\212\22\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\31\5"+
    "\1\213\1\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\5\5\1\214\25\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\7\5\1\215\23\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\3\5\1\216\21\5"+
    "\1\217\5\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\13\5\1\220\17\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\3\5\1\221\27\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\10\5\1\222\22\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\1\5"+
    "\1\223\11\5\1\224\17\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\10\5\1\225\22\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\12\5\1\226\20\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\5\5"+
    "\1\227\25\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\6\5\1\230\24\5\30\0\3\5\1\0\1\5"+
    "\1\231\5\5\1\0\2\5\5\0\33\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\25\5\1\232\1\233"+
    "\4\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\6\5\1\234\5\5\1\235\16\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\5\5\1\236\25\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\1\5\1\237"+
    "\31\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\240\27\5\30\0\3\5\1\0\1\241\6\5"+
    "\1\0\2\5\5\0\33\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\2\5\1\242\30\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\13\5\1\243\17\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\14\5"+
    "\1\244\16\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\3\5\1\245\27\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\5\1\246\31\5\30\0\3\5"+
    "\1\0\2\5\1\247\4\5\1\0\2\5\5\0\33\5"+
    "\121\0\1\250\105\0\1\251\14\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\14\5\1\252\16\5\30\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\11\5\1\253\21\5"+
    "\32\0\1\177\2\0\2\74\1\177\2\0\1\177\2\0"+
    "\1\74\17\0\1\74\52\0\1\177\4\0\1\177\2\0"+
    "\1\177\73\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\25\5\1\254\5\5\32\0\1\202\1\0\1\67\1\70"+
    "\1\71\1\202\1\0\2\202\1\0\2\202\11\0\1\202"+
    "\2\0\1\202\1\67\2\202\1\0\1\202\2\0\1\202"+
    "\2\0\1\202\40\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\20\5\1\255\12\5\24\0\22\112\1\256\1\205"+
    "\62\112\6\0\1\117\4\0\1\117\1\0\2\117\1\0"+
    "\2\117\11\0\1\117\2\0\1\117\1\0\2\117\1\0"+
    "\1\117\2\0\1\117\2\0\1\117\40\0\3\5\1\0"+
    "\1\5\1\257\5\5\1\0\2\5\5\0\33\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\7\5\1\260"+
    "\23\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\7\5\1\261\23\5\30\0\3\5\1\0\1\5\1\262"+
    "\5\5\1\0\2\5\5\0\33\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\14\5\1\263\16\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\10\5\1\264"+
    "\22\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\5\1\265\31\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\7\5\1\266\23\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\7\5\1\267\23\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\24\5\1\270"+
    "\6\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\5\5\1\271\25\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\5\1\272\31\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\4\5\1\273\26\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\14\5\1\274"+
    "\16\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\14\5\1\275\16\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\13\5\1\276\17\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\2\5\1\277\30\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\7\5\1\300"+
    "\23\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\10\5\1\301\22\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\3\5\1\302\27\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\6\5\1\303\24\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\3\5\1\304"+
    "\27\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\5\5\1\305\25\5\30\0\3\5\1\0\7\5\1\0"+
    "\1\260\1\5\5\0\33\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\3\5\1\306\7\5\1\307\17\5"+
    "\30\0\3\5\1\0\7\5\1\0\2\5\5\0\7\5"+
    "\1\310\23\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\6\5\1\311\24\5\30\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\5\5\1\312\25\5\30\0\3\5"+
    "\1\0\1\5\1\313\5\5\1\0\2\5\5\0\33\5"+
    "\30\0\3\5\1\0\2\5\1\257\4\5\1\0\2\5"+
    "\5\0\33\5\30\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\3\5\1\314\27\5\30\0\3\5\1\0\7\5"+
    "\1\0\1\315\1\5\5\0\33\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\11\5\1\316\21\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\21\5\1\317"+
    "\11\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\6\5\1\320\24\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\13\5\1\321\17\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\6\5\1\322\24\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\2\5\1\323"+
    "\30\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\25\5\1\324\5\5\30\0\3\5\1\0\1\5\1\325"+
    "\5\5\1\0\2\5\5\0\33\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\10\5\1\326\22\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\3\5\1\327"+
    "\27\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\7\5\1\315\23\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\7\5\1\330\23\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\5\5\1\331\25\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\22\5\1\332"+
    "\10\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\5\1\333\31\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\3\5\1\334\27\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\22\5\1\335\10\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\1\5\1\336"+
    "\31\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\337\27\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\7\5\1\340\23\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\5\1\341\31\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\7\5\1\342"+
    "\23\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\2\5\1\343\30\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\3\5\1\344\27\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\2\5\1\345\30\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\2\5\1\346"+
    "\30\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\7\5\1\347\23\5\30\0\3\5\1\0\1\5\1\350"+
    "\5\5\1\0\2\5\5\0\33\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\11\5\1\351\21\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\12\5\1\352"+
    "\20\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\353\27\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\22\5\1\354\10\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\23\5\1\355\7\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\2\5\1\356"+
    "\30\5\30\0\3\5\1\0\1\5\1\357\5\5\1\0"+
    "\2\5\5\0\33\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\12\5\1\360\20\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\7\5\1\361\23\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\7\5\1\362"+
    "\23\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\363\27\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\10\5\1\364\22\5\30\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\7\5\1\365\23\5\30\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\6\5\1\366"+
    "\24\5\30\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\11\5\1\367\21\5\30\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\7\5\1\370\23\5\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12180];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\35\1\10\11\11\1\3\11"+
    "\5\1\1\0\2\11\1\0\2\11\1\1\2\0\2\1"+
    "\2\0\2\1\1\0\3\11\3\0\36\1\1\11\1\1"+
    "\13\11\2\1\1\11\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\11\1\0\40\1\2\11\4\1\1\11\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
       return new MySymbol(type, yyline+1, yycolumn+1, yytext());
    }

  private Symbol symbol(int type, Object value) {
    return new MySymbol(type, yyline+1, yycolumn+1, value);
  }

  public String getTokName(int token) {
      return getTokenName(token);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return symbol(CARET);
          }
        case 92: break;
        case 73: 
          { return symbol(UNION);
          }
        case 93: break;
        case 81: 
          { return symbol(SIGNED);
          }
        case 94: break;
        case 40: 
          { return symbol(LE_OP);
          }
        case 95: break;
        case 24: 
          { return symbol(VERTICALBAR);
          }
        case 96: break;
        case 91: 
          { return symbol(CONTINUE);
          }
        case 97: break;
        case 1: 
          { Errors.fatal(yyline+1, yycolumn+1, "Illegal character \"" + yytext()+ "\"");
       System.exit(-1);
          }
        case 98: break;
        case 84: 
          { return symbol(STATIC);
          }
        case 99: break;
        case 38: 
          { return symbol(DO);
          }
        case 100: break;
        case 41: 
          { return symbol(RIGHT_OP);
          }
        case 101: break;
        case 88: 
          { return symbol(VOLATILE);
          }
        case 102: break;
        case 54: 
          { return symbol(CHARLITERAL, yytext());
          }
        case 103: break;
        case 18: 
          { return symbol(GREATER);
          }
        case 104: break;
        case 53: 
          { return symbol(ELLIPSIS);
          }
        case 105: break;
        case 35: 
          { return symbol(MUL_ASSIGN);
          }
        case 106: break;
        case 3: 
          { return symbol(ID, yytext());
          }
        case 107: break;
        case 8: 
          { return symbol(TIMES);
          }
        case 108: break;
        case 63: 
          { return symbol(TRUE);
          }
        case 109: break;
        case 75: 
          { return symbol(SHORT);
          }
        case 110: break;
        case 13: 
          { return symbol(LSQBRACKET);
          }
        case 111: break;
        case 62: 
          { return symbol(NULL);
          }
        case 112: break;
        case 7: 
          { return symbol(DIVIDE);
          }
        case 113: break;
        case 60: 
          { return symbol(LONG);
          }
        case 114: break;
        case 19: 
          { return symbol(PLUS);
          }
        case 115: break;
        case 47: 
          { return symbol(AND_ASSIGN);
          }
        case 116: break;
        case 10: 
          { return symbol(RPAREN);
          }
        case 117: break;
        case 76: 
          { return symbol(CONST);
          }
        case 118: break;
        case 67: 
          { return symbol(AUTO);
          }
        case 119: break;
        case 36: 
          { return symbol(STRINGLITERAL, yytext());
          }
        case 120: break;
        case 21: 
          { return symbol(PERCENT);
          }
        case 121: break;
        case 25: 
          { return symbol(BANG);
          }
        case 122: break;
        case 61: 
          { return symbol(COMMENTBLOCK, yytext());
          }
        case 123: break;
        case 20: 
          { return symbol(ASSIGN);
          }
        case 124: break;
        case 66: 
          { return symbol(ENUM);
          }
        case 125: break;
        case 32: 
          { return symbol(SUB_ASSIGN);
          }
        case 126: break;
        case 28: 
          { return symbol(HASH);
          }
        case 127: break;
        case 56: 
          { return symbol(FOR);
          }
        case 128: break;
        case 70: 
          { return symbol(GOTO);
          }
        case 129: break;
        case 44: 
          { return symbol(ADD_ASSIGN);
          }
        case 130: break;
        case 45: 
          { return symbol(EQUALS);
          }
        case 131: break;
        case 33: 
          { return symbol(COMMENTLINE, yytext());
          }
        case 132: break;
        case 51: 
          { return symbol(OR_OP);
          }
        case 133: break;
        case 71: 
          { return symbol(FALSE);
          }
        case 134: break;
        case 57: 
          { return symbol(LEFT_ASSIGN);
          }
        case 135: break;
        case 87: 
          { return symbol(DEFAULT);
          }
        case 136: break;
        case 80: 
          { return symbol(DOUBLE);
          }
        case 137: break;
        case 37: 
          { return symbol(IF);
          }
        case 138: break;
        case 69: 
          { return symbol(CHAR);
          }
        case 139: break;
        case 85: 
          { return symbol(SWITCH);
          }
        case 140: break;
        case 43: 
          { return symbol(INC_OP);
          }
        case 141: break;
        case 9: 
          { return symbol(LPAREN);
          }
        case 142: break;
        case 72: 
          { return symbol(BREAK);
          }
        case 143: break;
        case 34: 
          { return symbol(DIV_ASSIGN);
          }
        case 144: break;
        case 4: 
          { return symbol(INTLITERAL, yytext());
          }
        case 145: break;
        case 79: 
          { return symbol(EXTERN);
          }
        case 146: break;
        case 46: 
          { return symbol(MOD_ASSIGN);
          }
        case 147: break;
        case 39: 
          { return symbol(LEFT_OP);
          }
        case 148: break;
        case 12: 
          { return symbol(RCURLY);
          }
        case 149: break;
        case 64: 
          { return symbol(BOOL);
          }
        case 150: break;
        case 58: 
          { return symbol(RIGHT_ASSIGN);
          }
        case 151: break;
        case 86: 
          { return symbol(TYPEDEF);
          }
        case 152: break;
        case 15: 
          { return symbol(SEMICOLON);
          }
        case 153: break;
        case 49: 
          { return symbol(XOR_ASSIGN);
          }
        case 154: break;
        case 29: 
          { return symbol(REALLITERAL, yytext());
          }
        case 155: break;
        case 52: 
          { return symbol(NE_OP);
          }
        case 156: break;
        case 74: 
          { return symbol(FLOAT);
          }
        case 157: break;
        case 68: 
          { return symbol(CASE);
          }
        case 158: break;
        case 5: 
          { return symbol(MINUS);
          }
        case 159: break;
        case 22: 
          { return symbol(AMPERSAND);
          }
        case 160: break;
        case 14: 
          { return symbol(RSQBRACKET);
          }
        case 161: break;
        case 89: 
          { return symbol(REGISTER);
          }
        case 162: break;
        case 55: 
          { return symbol(INT);
          }
        case 163: break;
        case 50: 
          { return symbol(OR_ASSIGN);
          }
        case 164: break;
        case 11: 
          { return symbol(LCURLY);
          }
        case 165: break;
        case 90: 
          { return symbol(UNSIGNED);
          }
        case 166: break;
        case 82: 
          { return symbol(SIZEOF);
          }
        case 167: break;
        case 26: 
          { return symbol(TILDE);
          }
        case 168: break;
        case 59: 
          { return symbol(VOID);
          }
        case 169: break;
        case 30: 
          { return symbol(DEC_OP);
          }
        case 170: break;
        case 2: 
          { /* ignore */
          }
        case 171: break;
        case 27: 
          { return symbol(QUESTIONMAR);
          }
        case 172: break;
        case 83: 
          { return symbol(STRUCT);
          }
        case 173: break;
        case 48: 
          { return symbol(AND_OP);
          }
        case 174: break;
        case 77: 
          { return symbol(WHILE);
          }
        case 175: break;
        case 17: 
          { return symbol(LESS);
          }
        case 176: break;
        case 42: 
          { return symbol(GE_OP);
          }
        case 177: break;
        case 65: 
          { return symbol(ELSE);
          }
        case 178: break;
        case 16: 
          { return symbol(COMMA);
          }
        case 179: break;
        case 78: 
          { return symbol(RETURN);
          }
        case 180: break;
        case 31: 
          { return symbol(PTR_OP);
          }
        case 181: break;
        case 6: 
          { return symbol(FULLSTOP);
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
