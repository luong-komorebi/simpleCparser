/* The following code was generated by JFlex 1.4.3 on 12/28/17, 12:05 AM */

import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/28/17, 12:05 AM from the specification file
 * <tt>SimpleC.lex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\102\1\24"+
    "\1\106\1\0\1\76\1\77\1\26\1\62\1\63\1\23\1\74\1\71"+
    "\1\7\1\17\1\22\1\13\7\16\2\6\1\103\1\70\1\72\1\75"+
    "\1\73\1\105\1\0\1\46\3\15\1\20\1\21\5\4\1\12\1\4"+
    "\1\61\3\4\1\45\1\47\1\44\1\10\2\4\1\14\2\4\1\66"+
    "\1\25\1\67\1\100\1\4\1\0\1\43\1\33\1\51\1\40\1\36"+
    "\1\41\1\54\1\52\1\30\1\4\1\50\1\11\1\53\1\31\1\34"+
    "\1\60\1\4\1\35\1\42\1\32\1\37\1\5\1\56\1\27\1\57"+
    "\1\55\1\64\1\101\1\65\1\104\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\2\1\4\1\5\2\3"+
    "\1\4\1\6\1\3\1\7\1\10\2\1\17\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\3\3\4\1\36\1\0"+
    "\1\36\1\37\1\0\1\40\1\41\1\3\2\0\1\36"+
    "\1\4\2\0\1\3\1\42\1\0\1\43\1\44\1\45"+
    "\3\0\1\3\1\46\11\3\1\47\20\3\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\2\3\1\4\1\36\1\0"+
    "\1\3\1\4\1\66\1\3\1\0\1\67\1\0\1\70"+
    "\16\3\1\71\17\3\1\72\1\73\1\3\1\74\1\75"+
    "\1\3\1\76\1\77\1\3\1\100\3\3\1\101\1\3"+
    "\1\102\14\3\1\103\2\3\1\104\1\105\1\106\1\3"+
    "\1\107\1\3\1\110\1\3\1\111\3\3\1\112\3\3"+
    "\1\113\4\3\1\114\2\3\1\115\1\116\2\3\1\117"+
    "\1\3\1\120\1\3\1\121\1\3\1\122\1\123\1\124"+
    "\1\125\1\126\2\3\1\127\2\3\1\130\1\3\1\131"+
    "\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\107\0\325\0\u011c\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a"+
    "\0\u0ad1\0\107\0\107\0\107\0\107\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\107\0\107\0\u0cc2\0\107\0\107"+
    "\0\u0d09\0\u03e2\0\u0429\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\107\0\107\0\107\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\325\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\107\0\u17da\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\u1821\0\u1868\0\107\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\107\0\u19cb\0\u1a12\0\107\0\u1a59\0\325\0\u1aa0"+
    "\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\325\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\107\0\107\0\u22ab"+
    "\0\325\0\325\0\u22f2\0\107\0\325\0\u2339\0\325\0\u2380"+
    "\0\u23c7\0\u240e\0\325\0\u2455\0\325\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\325\0\u27f0\0\u2837\0\325\0\325\0\325\0\u287e"+
    "\0\325\0\u28c5\0\325\0\u290c\0\325\0\u2953\0\u299a\0\u29e1"+
    "\0\325\0\u2a28\0\u2a6f\0\u2ab6\0\325\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u2bd2\0\325\0\u2c19\0\u2c60\0\325\0\325\0\u2ca7\0\u2cee"+
    "\0\325\0\u2d35\0\325\0\u2d7c\0\325\0\u2dc3\0\325\0\325"+
    "\0\325\0\325\0\325\0\u2e0a\0\u2e51\0\325\0\u2e98\0\u2edf"+
    "\0\325\0\u2f26\0\325\0\325\0\325\0\325";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\12\1\13\2\5\1\7\1\14\1\5\1\15"+
    "\1\16\1\17\1\20\1\2\1\21\1\5\1\22\1\5"+
    "\1\23\1\24\1\5\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\4\5\1\35\2\5\1\36\1\5"+
    "\1\37\2\5\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\111\0\1\4\110\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\33\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\5\5\1\66\25\5\33\0\1\7\1\0\1\67"+
    "\1\70\1\71\1\7\2\0\1\7\1\72\1\73\1\74"+
    "\14\0\1\73\1\67\1\0\1\74\53\0\1\7\1\75"+
    "\3\0\1\13\2\0\1\7\1\76\53\0\1\77\1\0"+
    "\1\100\15\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\5\5\1\101\25\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\2\0\1\102\1\0\1\103\33\5\33\0\1\104"+
    "\1\0\1\67\1\70\1\71\1\105\1\106\1\0\1\105"+
    "\1\72\1\73\1\74\5\0\1\106\6\0\1\73\1\67"+
    "\1\0\1\74\53\0\1\72\4\0\1\72\2\0\1\72"+
    "\1\107\73\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\17\5\1\110\13\5\47\0\1\111\1\112\51\0\1\113"+
    "\106\0\1\114\11\0\24\102\1\115\1\116\61\102\1\117"+
    "\2\0\22\117\1\120\1\0\60\117\4\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\2\5\1\121\7\5\1\122"+
    "\20\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\6\5\1\123\21\5\1\124\2\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\5\5\1\125\1\126\24\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\7\5"+
    "\1\127\23\5\31\0\3\5\1\0\1\5\1\130\5\5"+
    "\1\0\2\5\5\0\1\131\1\5\1\132\30\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\2\5\1\133"+
    "\30\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\5\5\1\134\1\5\1\135\23\5\31\0\3\5\1\0"+
    "\1\5\1\136\5\5\1\0\2\5\5\0\5\5\1\137"+
    "\6\5\1\140\16\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\5\1\141\1\5\1\142\17\5\1\143"+
    "\3\5\1\144\3\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\10\5\1\145\22\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\16\5\1\146\14\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\5\5\1\147"+
    "\6\5\1\150\6\5\1\151\7\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\5\5\1\152\25\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\23\5\1\153"+
    "\7\5\31\0\3\5\1\0\1\154\6\5\1\0\2\5"+
    "\5\0\33\5\117\0\1\155\2\0\1\156\104\0\1\157"+
    "\1\0\1\160\17\0\1\7\4\0\1\13\2\0\1\7"+
    "\1\76\54\0\1\161\1\162\106\0\1\163\106\0\1\164"+
    "\106\0\1\165\1\0\1\166\104\0\1\167\106\0\1\170"+
    "\3\0\1\171\102\0\1\172\15\0\3\5\1\0\1\5"+
    "\1\173\5\5\1\0\2\5\5\0\1\5\1\174\31\5"+
    "\36\0\1\70\1\71\105\0\1\175\107\0\1\175\102\0"+
    "\1\72\2\0\2\74\1\72\2\0\1\72\1\0\1\73"+
    "\1\74\14\0\1\73\2\0\1\74\53\0\1\176\1\177"+
    "\3\0\1\176\2\0\1\176\55\0\1\177\20\0\1\72"+
    "\4\0\1\72\2\0\1\72\74\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\2\5\1\200\30\5\33\0\1\104"+
    "\2\0\2\74\1\104\2\0\1\104\1\72\1\73\1\74"+
    "\14\0\1\73\2\0\1\74\53\0\1\104\1\0\1\67"+
    "\1\70\1\71\1\105\2\0\1\105\1\72\1\73\1\74"+
    "\14\0\1\73\1\67\1\0\1\74\53\0\1\201\4\0"+
    "\1\201\1\0\2\201\1\0\2\201\11\0\1\201\2\0"+
    "\1\201\1\0\2\201\1\0\1\201\2\0\1\201\2\0"+
    "\1\201\54\0\1\202\73\0\3\5\1\0\2\5\1\203"+
    "\4\5\1\0\2\5\5\0\33\5\25\0\1\111\2\0"+
    "\104\111\23\112\1\204\63\112\2\102\1\0\104\102\1\117"+
    "\2\0\22\117\1\120\1\205\61\117\2\0\24\117\1\206"+
    "\57\117\4\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\207\27\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\10\5\1\210\22\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\31\5\1\211\1\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\5\5\1\212"+
    "\25\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\7\5\1\213\23\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\3\5\1\214\21\5\1\215\5\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\13\5\1\216"+
    "\17\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\3\5\1\217\27\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\10\5\1\220\22\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\5\1\221\11\5\1\222"+
    "\17\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\10\5\1\223\22\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\12\5\1\224\20\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\5\5\1\225\25\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\6\5\1\226"+
    "\24\5\31\0\3\5\1\0\1\5\1\227\5\5\1\0"+
    "\2\5\5\0\33\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\25\5\1\230\1\231\4\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\6\5\1\232\5\5"+
    "\1\233\16\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\5\5\1\234\25\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\5\1\235\31\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\3\5\1\236\27\5"+
    "\31\0\3\5\1\0\1\237\6\5\1\0\2\5\5\0"+
    "\33\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\2\5\1\240\30\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\13\5\1\241\17\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\14\5\1\242\16\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\3\5\1\243"+
    "\27\5\31\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\5\1\244\31\5\31\0\3\5\1\0\2\5\1\245"+
    "\4\5\1\0\2\5\5\0\33\5\122\0\1\246\106\0"+
    "\1\247\15\0\3\5\1\0\7\5\1\0\2\5\5\0"+
    "\14\5\1\250\16\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\11\5\1\251\21\5\33\0\1\176\2\0"+
    "\2\74\1\176\2\0\1\176\2\0\1\74\17\0\1\74"+
    "\53\0\1\176\4\0\1\176\2\0\1\176\74\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\25\5\1\252\5\5"+
    "\33\0\1\201\1\0\1\67\1\70\1\71\1\201\1\0"+
    "\2\201\1\0\2\201\11\0\1\201\2\0\1\201\1\67"+
    "\2\201\1\0\1\201\2\0\1\201\2\0\1\201\41\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\20\5\1\253"+
    "\12\5\25\0\22\112\1\254\1\204\63\112\6\0\1\117"+
    "\4\0\1\117\1\0\2\117\1\0\2\117\11\0\1\117"+
    "\2\0\1\117\1\0\2\117\1\0\1\117\2\0\1\117"+
    "\2\0\1\117\41\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\7\5\1\255\23\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\7\5\1\256\23\5\31\0\3\5"+
    "\1\0\1\5\1\257\5\5\1\0\2\5\5\0\33\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\14\5"+
    "\1\260\16\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\10\5\1\261\22\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\5\1\262\31\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\7\5\1\263\23\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\7\5"+
    "\1\264\23\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\24\5\1\265\6\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\5\5\1\266\25\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\5\1\267\31\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\4\5"+
    "\1\270\26\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\14\5\1\271\16\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\14\5\1\272\16\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\13\5\1\273\17\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\2\5"+
    "\1\274\30\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\7\5\1\275\23\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\10\5\1\276\22\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\3\5\1\277\27\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\6\5"+
    "\1\300\24\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\3\5\1\301\27\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\5\5\1\302\25\5\31\0\3\5"+
    "\1\0\7\5\1\0\1\255\1\5\5\0\33\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\3\5\1\303"+
    "\7\5\1\304\17\5\31\0\3\5\1\0\7\5\1\0"+
    "\2\5\5\0\7\5\1\305\23\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\6\5\1\306\24\5\31\0"+
    "\3\5\1\0\7\5\1\0\2\5\5\0\5\5\1\307"+
    "\25\5\31\0\3\5\1\0\1\5\1\310\5\5\1\0"+
    "\2\5\5\0\33\5\31\0\3\5\1\0\2\5\1\311"+
    "\4\5\1\0\2\5\5\0\33\5\31\0\3\5\1\0"+
    "\7\5\1\0\2\5\5\0\3\5\1\312\27\5\31\0"+
    "\3\5\1\0\7\5\1\0\1\313\1\5\5\0\33\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\11\5"+
    "\1\314\21\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\21\5\1\315\11\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\6\5\1\316\24\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\13\5\1\317\17\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\6\5"+
    "\1\320\24\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\2\5\1\321\30\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\25\5\1\322\5\5\31\0\3\5"+
    "\1\0\1\5\1\323\5\5\1\0\2\5\5\0\33\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\10\5"+
    "\1\324\22\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\3\5\1\325\27\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\7\5\1\313\23\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\7\5\1\326\23\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\5\5"+
    "\1\327\25\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\22\5\1\330\10\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\5\1\331\31\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\3\5\1\332\27\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\22\5"+
    "\1\333\10\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\1\5\1\334\31\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\3\5\1\335\27\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\7\5\1\336\23\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\1\5"+
    "\1\337\31\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\7\5\1\340\23\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\2\5\1\341\30\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\3\5\1\342\27\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\2\5"+
    "\1\343\30\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\2\5\1\344\30\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\7\5\1\345\23\5\31\0\3\5"+
    "\1\0\1\5\1\346\5\5\1\0\2\5\5\0\33\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\11\5"+
    "\1\347\21\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\12\5\1\350\20\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\3\5\1\351\27\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\22\5\1\352\10\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\23\5"+
    "\1\353\7\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\2\5\1\354\30\5\31\0\3\5\1\0\1\5"+
    "\1\355\5\5\1\0\2\5\5\0\33\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\12\5\1\356\20\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\7\5"+
    "\1\357\23\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\7\5\1\360\23\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\3\5\1\361\27\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\10\5\1\362\22\5"+
    "\31\0\3\5\1\0\7\5\1\0\2\5\5\0\7\5"+
    "\1\363\23\5\31\0\3\5\1\0\7\5\1\0\2\5"+
    "\5\0\6\5\1\364\24\5\31\0\3\5\1\0\7\5"+
    "\1\0\2\5\5\0\11\5\1\365\21\5\31\0\3\5"+
    "\1\0\7\5\1\0\2\5\5\0\7\5\1\366\23\5"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12141];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\34\1\10\11\11\1\4\11"+
    "\5\1\1\0\2\11\1\0\2\11\1\1\2\0\2\1"+
    "\2\0\2\1\1\0\3\11\3\0\35\1\1\11\1\1"+
    "\13\11\2\1\1\11\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\11\1\0\37\1\2\11\4\1\1\11\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
       return new MySymbol(type, yyline+1, yycolumn+1, yytext());
    }

  private Symbol symbol(int type, Object value) {
    return new MySymbol(type, yyline+1, yycolumn+1, value);
  }

  public String getTokName(int token) {
      return getTokenName(token);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return symbol(CARET);
          }
        case 93: break;
        case 74: 
          { return symbol(UNION);
          }
        case 94: break;
        case 82: 
          { return symbol(SIGNED);
          }
        case 95: break;
        case 41: 
          { return symbol(LE_OP);
          }
        case 96: break;
        case 24: 
          { return symbol(VERTICALBAR);
          }
        case 97: break;
        case 92: 
          { return symbol(CONTINUE);
          }
        case 98: break;
        case 1: 
          { Errors.fatal(yyline+1, yycolumn+1, "Illegal character \"" + yytext()+ "\"");
       System.exit(-1);
          }
        case 99: break;
        case 85: 
          { return symbol(STATIC);
          }
        case 100: break;
        case 39: 
          { return symbol(DO);
          }
        case 101: break;
        case 42: 
          { return symbol(RIGHT_OP);
          }
        case 102: break;
        case 89: 
          { return symbol(VOLATILE);
          }
        case 103: break;
        case 55: 
          { return symbol(CHARLITERAL, yytext());
          }
        case 104: break;
        case 18: 
          { return symbol(GREATER);
          }
        case 105: break;
        case 54: 
          { return symbol(ELLIPSIS);
          }
        case 106: break;
        case 36: 
          { return symbol(MUL_ASSIGN);
          }
        case 107: break;
        case 3: 
          { return symbol(ID, yytext());
          }
        case 108: break;
        case 8: 
          { return symbol(TIMES);
          }
        case 109: break;
        case 63: 
          { return symbol(TRUE);
          }
        case 110: break;
        case 76: 
          { return symbol(SHORT);
          }
        case 111: break;
        case 13: 
          { return symbol(LSQBRACKET);
          }
        case 112: break;
        case 71: 
          { return symbol(NULL);
          }
        case 113: break;
        case 7: 
          { return symbol(DIVIDE);
          }
        case 114: break;
        case 61: 
          { return symbol(LONG);
          }
        case 115: break;
        case 19: 
          { return symbol(PLUS);
          }
        case 116: break;
        case 48: 
          { return symbol(AND_ASSIGN);
          }
        case 117: break;
        case 10: 
          { return symbol(RPAREN);
          }
        case 118: break;
        case 77: 
          { return symbol(CONST);
          }
        case 119: break;
        case 67: 
          { return symbol(AUTO);
          }
        case 120: break;
        case 37: 
          { return symbol(STRINGLITERAL, yytext());
          }
        case 121: break;
        case 21: 
          { return symbol(PERCENT);
          }
        case 122: break;
        case 25: 
          { return symbol(BANG);
          }
        case 123: break;
        case 62: 
          { return symbol(COMMENTBLOCK, yytext());
          }
        case 124: break;
        case 20: 
          { return symbol(ASSIGN);
          }
        case 125: break;
        case 66: 
          { return symbol(ENUM);
          }
        case 126: break;
        case 33: 
          { return symbol(SUB_ASSIGN);
          }
        case 127: break;
        case 29: 
          { return symbol(HASH);
          }
        case 128: break;
        case 57: 
          { return symbol(FOR);
          }
        case 129: break;
        case 70: 
          { return symbol(GOTO);
          }
        case 130: break;
        case 45: 
          { return symbol(ADD_ASSIGN);
          }
        case 131: break;
        case 46: 
          { return symbol(EQUALS);
          }
        case 132: break;
        case 34: 
          { return symbol(COMMENTLINE, yytext());
          }
        case 133: break;
        case 72: 
          { return symbol(FALSE);
          }
        case 134: break;
        case 52: 
          { return symbol(OR_OP);
          }
        case 135: break;
        case 58: 
          { return symbol(LEFT_ASSIGN);
          }
        case 136: break;
        case 88: 
          { return symbol(DEFAULT);
          }
        case 137: break;
        case 81: 
          { return symbol(DOUBLE);
          }
        case 138: break;
        case 38: 
          { return symbol(IF);
          }
        case 139: break;
        case 69: 
          { return symbol(CHAR);
          }
        case 140: break;
        case 86: 
          { return symbol(SWITCH);
          }
        case 141: break;
        case 44: 
          { return symbol(INC_OP);
          }
        case 142: break;
        case 9: 
          { return symbol(LPAREN);
          }
        case 143: break;
        case 73: 
          { return symbol(BREAK);
          }
        case 144: break;
        case 35: 
          { return symbol(DIV_ASSIGN);
          }
        case 145: break;
        case 4: 
          { return symbol(INTLITERAL, yytext());
          }
        case 146: break;
        case 80: 
          { return symbol(EXTERN);
          }
        case 147: break;
        case 47: 
          { return symbol(MOD_ASSIGN);
          }
        case 148: break;
        case 40: 
          { return symbol(LEFT_OP);
          }
        case 149: break;
        case 12: 
          { return symbol(RCURLY);
          }
        case 150: break;
        case 64: 
          { return symbol(BOOL);
          }
        case 151: break;
        case 59: 
          { return symbol(RIGHT_ASSIGN);
          }
        case 152: break;
        case 87: 
          { return symbol(TYPEDEF);
          }
        case 153: break;
        case 15: 
          { return symbol(SEMICOLON);
          }
        case 154: break;
        case 50: 
          { return symbol(XOR_ASSIGN);
          }
        case 155: break;
        case 30: 
          { return symbol(REALLITERAL, yytext());
          }
        case 156: break;
        case 53: 
          { return symbol(NE_OP);
          }
        case 157: break;
        case 75: 
          { return symbol(FLOAT);
          }
        case 158: break;
        case 68: 
          { return symbol(CASE);
          }
        case 159: break;
        case 5: 
          { return symbol(MINUS);
          }
        case 160: break;
        case 22: 
          { return symbol(AMPERSAND);
          }
        case 161: break;
        case 14: 
          { return symbol(RSQBRACKET);
          }
        case 162: break;
        case 90: 
          { return symbol(REGISTER);
          }
        case 163: break;
        case 56: 
          { return symbol(INT);
          }
        case 164: break;
        case 51: 
          { return symbol(OR_ASSIGN);
          }
        case 165: break;
        case 26: 
          { return symbol(COLON);
          }
        case 166: break;
        case 11: 
          { return symbol(LCURLY);
          }
        case 167: break;
        case 91: 
          { return symbol(UNSIGNED);
          }
        case 168: break;
        case 83: 
          { return symbol(SIZEOF);
          }
        case 169: break;
        case 27: 
          { return symbol(TILDE);
          }
        case 170: break;
        case 60: 
          { return symbol(VOID);
          }
        case 171: break;
        case 31: 
          { return symbol(DEC_OP);
          }
        case 172: break;
        case 2: 
          { /* ignore */
          }
        case 173: break;
        case 28: 
          { return symbol(QUESTIONMAR);
          }
        case 174: break;
        case 84: 
          { return symbol(STRUCT);
          }
        case 175: break;
        case 49: 
          { return symbol(AND_OP);
          }
        case 176: break;
        case 78: 
          { return symbol(WHILE);
          }
        case 177: break;
        case 17: 
          { return symbol(LESS);
          }
        case 178: break;
        case 43: 
          { return symbol(GE_OP);
          }
        case 179: break;
        case 65: 
          { return symbol(ELSE);
          }
        case 180: break;
        case 16: 
          { return symbol(COMMA);
          }
        case 181: break;
        case 79: 
          { return symbol(RETURN);
          }
        case 182: break;
        case 32: 
          { return symbol(PTR_OP);
          }
        case 183: break;
        case 6: 
          { return symbol(FULLSTOP);
          }
        case 184: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
