
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 29 01:20:10 ICT 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 29 01:20:10 ICT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\005\000" +
    "\002\006\010\000\002\007\006\000\002\030\006\000\002" +
    "\010\005\000\002\022\003\000\002\022\005\000\002\022" +
    "\002\000\002\021\004\000\002\031\010\000\002\011\006" +
    "\000\002\005\004\000\002\005\002\000\002\012\004\000" +
    "\002\012\002\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\041\004\000\002\033\012\000\002\034\017\000\002" +
    "\035\016\000\002\036\003\000\002\036\002\000\002\037" +
    "\012\000\002\040\005\000\002\040\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\006\000\002\015\005\000" +
    "\002\026\006\000\002\025\003\000\002\025\005\000\002" +
    "\025\002\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\024\006\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\020\002\ufffe\004\ufffe\005\ufffe\006\ufffe\055" +
    "\ufffe\072\ufffe\075\ufffe\001\002\000\020\002\000\004\010" +
    "\005\011\006\014\055\013\072\021\075\015\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\020" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\055\ufffd\072\ufffd\075" +
    "\ufffd\001\002\000\004\017\uffb3\001\002\000\004\017\uffb1" +
    "\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\055" +
    "\ufffb\072\ufffb\075\ufffb\001\002\000\004\017\023\001\002" +
    "\000\004\017\uffb2\001\002\000\004\017\uffb0\001\002\000" +
    "\004\017\023\001\002\000\020\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\055\uffff\072\uffff\075\uffff\001\002\000\020\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\055\ufffa\072\ufffa\075\ufffa" +
    "\001\002\000\004\017\uffaf\001\002\000\020\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\055\ufffc\072\ufffc\075\ufffc\001\002" +
    "\000\070\017\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\127\uffa9\001\002\000\010\026\025\030\030\034" +
    "\026\001\002\000\004\020\250\001\002\000\034\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\025\ufff9\055\ufff9\072\ufff9\075\ufff9\001\002" +
    "\000\006\024\043\034\042\001\002\000\020\004\010\005" +
    "\011\006\014\031\ufff2\055\032\072\021\075\015\001\002" +
    "\000\006\031\ufff4\032\040\001\002\000\004\017\023\001" +
    "\002\000\004\031\036\001\002\000\004\017\023\001\002" +
    "\000\006\031\ufff1\032\ufff1\001\002\000\006\024\ufff5\034" +
    "\ufff5\001\002\000\004\017\uffae\001\002\000\020\004\010" +
    "\005\011\006\014\031\ufff2\055\032\072\021\075\015\001" +
    "\002\000\004\031\ufff3\001\002\000\020\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\055\ufff6\072\ufff6\075\ufff6\001\002\000" +
    "\032\004\uffed\005\uffed\006\uffed\012\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\025\uffed\055\uffed\072\uffed\075\uffed\001" +
    "\002\000\020\002\ufff7\004\ufff7\005\ufff7\006\ufff7\055\ufff7" +
    "\072\ufff7\075\ufff7\001\002\000\032\004\010\005\011\006" +
    "\014\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\025\uffeb" +
    "\055\032\072\021\075\015\001\002\000\032\004\uffee\005" +
    "\uffee\006\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\025\uffee\055\uffee\072\uffee\075\uffee\001\002\000\016\012" +
    "\056\014\053\015\067\016\055\017\023\025\054\001\002" +
    "\000\004\017\023\001\002\000\006\026\025\034\026\001" +
    "\002\000\016\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\025\uffe8\001\002\000\004\030\241\001\002\000\020\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\055\uffef\072\uffef\075\uffef" +
    "\001\002\000\036\007\103\010\113\011\120\017\023\020" +
    "\111\021\107\022\102\023\114\030\105\034\236\036\112" +
    "\041\116\052\117\053\101\001\002\000\004\030\222\001" +
    "\002\000\020\026\160\033\214\054\161\056\213\057\211" +
    "\060\212\061\210\001\002\000\016\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\025\uffe7\001\002\000\062\026\uffac" +
    "\027\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\054\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\127\uffac\001\002\000\016\012\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\025\uffe6\001\002\000" +
    "\064\026\uffad\027\uffad\030\202\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\127\uffad\001" +
    "\002\000\016\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\025\uffe5\001\002\000\016\012\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\025\uffe4\001\002\000\004\034\201\001\002" +
    "\000\004\030\074\001\002\000\004\034\073\001\002\000" +
    "\016\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\025\uffec" +
    "\001\002\000\016\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\025\uffe9\001\002\000\016\012\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\025\uffde\001\002\000\006\017\023\034" +
    "\uffd9\001\002\000\004\034\100\001\002\000\006\031\uffda" +
    "\034\uffda\001\002\000\020\026\uffad\033\uffad\054\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\001\002\000\034\007\103" +
    "\010\113\011\120\017\023\020\111\021\107\022\102\023" +
    "\114\030\105\036\112\041\116\052\117\053\101\001\002" +
    "\000\004\030\176\001\002\000\044\027\uffc0\031\uffc0\032" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\062" +
    "\uffc0\127\uffc0\001\002\000\044\027\uffbd\031\uffbd\032\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\062\uffbd" +
    "\127\uffbd\001\002\000\036\034\167\035\131\036\124\037" +
    "\134\040\126\044\135\045\136\046\133\047\130\050\125" +
    "\051\132\052\140\062\127\127\137\001\002\000\034\007" +
    "\103\010\113\011\120\017\023\020\111\021\107\022\102" +
    "\023\114\030\105\036\112\041\116\052\117\053\101\001" +
    "\002\000\050\026\160\027\uffc2\031\uffc2\032\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\161\062\uffc2" +
    "\127\uffc2\001\002\000\044\027\uffbf\031\uffbf\032\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\062\uffbf\127" +
    "\uffbf\001\002\000\044\027\uffd4\031\uffd4\032\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\062\uffd4\127\uffd4" +
    "\001\002\000\044\027\uffc1\031\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\062\uffc1\127\uffc1\001" +
    "\002\000\034\007\103\010\113\011\120\017\023\020\111" +
    "\021\107\022\102\023\114\030\105\036\112\041\116\052" +
    "\117\053\101\001\002\000\044\027\uffbc\031\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\062\uffbc" +
    "\127\uffbc\001\002\000\044\027\uffbe\031\uffbe\032\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\062\uffbe\127" +
    "\uffbe\001\002\000\044\027\uffd5\031\uffd5\032\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\062\uffd5\127\uffd5" +
    "\001\002\000\034\007\103\010\113\011\120\017\023\020" +
    "\111\021\107\022\102\023\114\030\105\036\112\041\116" +
    "\052\117\053\101\001\002\000\034\007\103\010\113\011" +
    "\120\017\023\020\111\021\107\022\102\023\114\030\105" +
    "\036\112\041\116\052\117\053\101\001\002\000\044\027" +
    "\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\062\uffbb\127\uffbb\001\002\000\044\027\uffba" +
    "\031\uffba\032\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\062\uffba\127\uffba\001\002\000\044\027\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\062\uffd3\127\uffd3\001\002\000\044\027\uffd2\031\uffd2" +
    "\032\uffd2\034\uffd2\035\131\036\124\037\134\040\126\044" +
    "\135\045\136\046\133\047\130\050\125\051\132\052\uffd2" +
    "\062\127\127\uffd2\001\002\000\034\007\103\010\113\011" +
    "\120\017\023\020\111\021\107\022\102\023\114\030\105" +
    "\036\112\041\116\052\117\053\101\001\002\000\034\007" +
    "\103\010\113\011\120\017\023\020\111\021\107\022\102" +
    "\023\114\030\105\036\112\041\116\052\117\053\101\001" +
    "\002\000\034\007\103\010\113\011\120\017\023\020\111" +
    "\021\107\022\102\023\114\030\105\036\112\041\116\052" +
    "\117\053\101\001\002\000\034\007\103\010\113\011\120" +
    "\017\023\020\111\021\107\022\102\023\114\030\105\036" +
    "\112\041\116\052\117\053\101\001\002\000\034\007\103" +
    "\010\113\011\120\017\023\020\111\021\107\022\102\023" +
    "\114\030\105\036\112\041\116\052\117\053\101\001\002" +
    "\000\034\007\103\010\113\011\120\017\023\020\111\021" +
    "\107\022\102\023\114\030\105\036\112\041\116\052\117" +
    "\053\101\001\002\000\034\007\103\010\113\011\120\017" +
    "\023\020\111\021\107\022\102\023\114\030\105\036\112" +
    "\041\116\052\117\053\101\001\002\000\034\007\103\010" +
    "\113\011\120\017\023\020\111\021\107\022\102\023\114" +
    "\030\105\036\112\041\116\052\117\053\101\001\002\000" +
    "\034\007\103\010\113\011\120\017\023\020\111\021\107" +
    "\022\102\023\114\030\105\036\112\041\116\052\117\053" +
    "\101\001\002\000\034\007\103\010\113\011\120\017\023" +
    "\020\111\021\107\022\102\023\114\030\105\036\112\041" +
    "\116\052\117\053\101\001\002\000\034\007\103\010\113" +
    "\011\120\017\023\020\111\021\107\022\102\023\114\030" +
    "\105\036\112\041\116\052\117\053\101\001\002\000\034" +
    "\007\103\010\113\011\120\017\023\020\111\021\107\022" +
    "\102\023\114\030\105\036\112\041\116\052\117\053\101" +
    "\001\002\000\034\007\103\010\113\011\120\017\023\020" +
    "\111\021\107\022\102\023\114\030\105\036\112\041\116" +
    "\052\117\053\101\001\002\000\044\027\uffca\031\uffca\032" +
    "\uffca\034\uffca\035\131\036\124\037\134\040\126\044\135" +
    "\045\136\046\133\047\130\050\125\051\132\052\uffca\062" +
    "\127\127\uffca\001\002\000\044\027\uffc9\031\uffc9\032\uffc9" +
    "\034\uffc9\035\131\036\124\037\134\040\126\044\135\045" +
    "\136\046\133\047\130\050\125\051\132\052\140\062\127" +
    "\127\uffc9\001\002\000\040\027\uffc7\031\uffc7\032\uffc7\034" +
    "\uffc7\035\131\036\124\037\134\040\126\046\133\047\130" +
    "\050\125\051\132\052\uffc7\062\127\127\uffc7\001\002\000" +
    "\040\027\uffc8\031\uffc8\032\uffc8\034\uffc8\035\131\036\124" +
    "\037\134\040\126\046\133\047\130\050\125\051\132\052" +
    "\uffc8\062\127\127\uffc8\001\002\000\044\027\uffcd\031\uffcd" +
    "\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\062\uffcd\127\uffcd\001\002\000\034\027\uffc6\031\uffc6\032" +
    "\uffc6\034\uffc6\035\131\036\124\037\134\040\126\044\uffc6" +
    "\045\uffc6\052\uffc6\062\127\127\uffc6\001\002\000\034\027" +
    "\uffc3\031\uffc3\032\uffc3\034\uffc3\035\131\036\124\037\134" +
    "\040\126\044\uffc3\045\uffc3\052\uffc3\062\127\127\uffc3\001" +
    "\002\000\044\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\134\040\126\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\062\127\127\uffcf\001\002" +
    "\000\034\027\uffc5\031\uffc5\032\uffc5\034\uffc5\035\131\036" +
    "\124\037\134\040\126\044\uffc5\045\uffc5\052\uffc5\062\127" +
    "\127\uffc5\001\002\000\044\027\uffcb\031\uffcb\032\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\062\uffcb\127" +
    "\uffcb\001\002\000\044\027\uffcc\031\uffcc\032\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\062\uffcc\127\uffcc" +
    "\001\002\000\034\027\uffc4\031\uffc4\032\uffc4\034\uffc4\035" +
    "\131\036\124\037\134\040\126\044\uffc4\045\uffc4\052\uffc4" +
    "\062\127\127\uffc4\001\002\000\044\027\uffce\031\uffce\032" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\134\040\126\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\062" +
    "\127\127\uffce\001\002\000\044\027\uffd1\031\uffd1\032\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\062\uffd1" +
    "\127\uffd1\001\002\000\044\027\uffd0\031\uffd0\032\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\134\040\126\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\062\127\127" +
    "\uffd0\001\002\000\034\007\103\010\113\011\120\017\023" +
    "\020\111\021\107\022\102\023\114\030\105\036\112\041" +
    "\116\052\117\053\101\001\002\000\004\017\023\001\002" +
    "\000\062\026\uffab\027\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\054\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\127\uffab\001\002" +
    "\000\036\027\164\035\131\036\124\037\134\040\126\044" +
    "\135\045\136\046\133\047\130\050\125\051\132\052\140" +
    "\062\127\127\137\001\002\000\062\026\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\054\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\127\uffaa\001\002\000\036\031\166\035\131\036" +
    "\124\037\134\040\126\044\135\045\136\046\133\047\130" +
    "\050\125\051\132\052\140\062\127\127\137\001\002\000" +
    "\044\027\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\062\uffb8\127\uffb8\001\002\000\006" +
    "\017\023\031\uffd9\001\002\000\004\031\171\001\002\000" +
    "\004\024\172\001\002\000\032\004\uffed\005\uffed\006\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\025\uffed\055" +
    "\uffed\072\uffed\075\uffed\001\002\000\032\004\010\005\011" +
    "\006\014\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\025" +
    "\uffeb\055\032\072\021\075\015\001\002\000\016\012\056" +
    "\014\053\015\067\016\055\017\023\025\175\001\002\000" +
    "\016\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\025\uffdb" +
    "\001\002\000\004\017\023\001\002\000\004\031\200\001" +
    "\002\000\044\027\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\062\uffb9\127\uffb9\001\002" +
    "\000\016\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\025" +
    "\uffea\001\002\000\040\007\103\010\113\011\120\017\023" +
    "\020\111\021\107\022\102\023\114\030\105\031\uffb4\032" +
    "\uffb4\036\112\041\116\052\117\053\101\001\002\000\040" +
    "\031\uffb6\032\uffb6\035\131\036\124\037\134\040\126\044" +
    "\135\045\136\046\133\047\130\050\125\051\132\052\140" +
    "\062\127\127\137\001\002\000\006\031\206\032\205\001" +
    "\002\000\034\007\103\010\113\011\120\017\023\020\111" +
    "\021\107\022\102\023\114\030\105\036\112\041\116\052" +
    "\117\053\101\001\002\000\044\027\uffb7\031\uffb7\032\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\062\uffb7" +
    "\127\uffb7\001\002\000\040\031\uffb5\032\uffb5\035\131\036" +
    "\124\037\134\040\126\044\135\045\136\046\133\047\130" +
    "\050\125\051\132\052\140\062\127\127\137\001\002\000" +
    "\034\007\103\010\113\011\120\017\023\020\111\021\107" +
    "\022\102\023\114\030\105\036\112\041\116\052\117\053" +
    "\101\001\002\000\034\007\103\010\113\011\120\017\023" +
    "\020\111\021\107\022\102\023\114\030\105\036\112\041" +
    "\116\052\117\053\101\001\002\000\034\007\103\010\113" +
    "\011\120\017\023\020\111\021\107\022\102\023\114\030" +
    "\105\036\112\041\116\052\117\053\101\001\002\000\034" +
    "\007\103\010\113\011\120\017\023\020\111\021\107\022" +
    "\102\023\114\030\105\036\112\041\116\052\117\053\101" +
    "\001\002\000\034\007\103\010\113\011\120\017\023\020" +
    "\111\021\107\022\102\023\114\030\105\036\112\041\116" +
    "\052\117\053\101\001\002\000\040\031\uffe3\034\uffe3\035" +
    "\131\036\124\037\134\040\126\044\135\045\136\046\133" +
    "\047\130\050\125\051\132\052\140\062\127\127\137\001" +
    "\002\000\040\031\uffe2\034\uffe2\035\131\036\124\037\134" +
    "\040\126\044\135\045\136\046\133\047\130\050\125\051" +
    "\132\052\140\062\127\127\137\001\002\000\040\031\uffe0" +
    "\034\uffe0\035\131\036\124\037\134\040\126\044\135\045" +
    "\136\046\133\047\130\050\125\051\132\052\140\062\127" +
    "\127\137\001\002\000\040\031\uffe1\034\uffe1\035\131\036" +
    "\124\037\134\040\126\044\135\045\136\046\133\047\130" +
    "\050\125\051\132\052\140\062\127\127\137\001\002\000" +
    "\040\031\uffdf\034\uffdf\035\131\036\124\037\134\040\126" +
    "\044\135\045\136\046\133\047\130\050\125\051\132\052" +
    "\140\062\127\127\137\001\002\000\034\007\103\010\113" +
    "\011\120\017\023\020\111\021\107\022\102\023\114\030" +
    "\105\036\112\041\116\052\117\053\101\001\002\000\036" +
    "\031\224\035\131\036\124\037\134\040\126\044\135\045" +
    "\136\046\133\047\130\050\125\051\132\052\140\062\127" +
    "\127\137\001\002\000\004\024\225\001\002\000\032\004" +
    "\uffed\005\uffed\006\uffed\012\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\025\uffed\055\uffed\072\uffed\075\uffed\001\002\000" +
    "\032\004\010\005\011\006\014\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\025\uffeb\055\032\072\021\075\015\001" +
    "\002\000\016\012\056\014\053\015\067\016\055\017\023" +
    "\025\230\001\002\000\020\012\uffdd\013\231\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\025\uffdd\001\002\000\004\024\232" +
    "\001\002\000\032\004\uffed\005\uffed\006\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\025\uffed\055\uffed\072\uffed" +
    "\075\uffed\001\002\000\032\004\010\005\011\006\014\012" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\025\uffeb\055\032" +
    "\072\021\075\015\001\002\000\016\012\056\014\053\015" +
    "\067\016\055\017\023\025\235\001\002\000\016\012\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\025\uffdc\001\002\000" +
    "\016\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\025\uffd6" +
    "\001\002\000\036\034\240\035\131\036\124\037\134\040" +
    "\126\044\135\045\136\046\133\047\130\050\125\051\132" +
    "\052\140\062\127\127\137\001\002\000\016\012\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\025\uffd7\001\002\000\034" +
    "\007\103\010\113\011\120\017\023\020\111\021\107\022" +
    "\102\023\114\030\105\036\112\041\116\052\117\053\101" +
    "\001\002\000\036\031\243\035\131\036\124\037\134\040" +
    "\126\044\135\045\136\046\133\047\130\050\125\051\132" +
    "\052\140\062\127\127\137\001\002\000\004\024\244\001" +
    "\002\000\032\004\uffed\005\uffed\006\uffed\012\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\025\uffed\055\uffed\072\uffed\075" +
    "\uffed\001\002\000\032\004\010\005\011\006\014\012\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\025\uffeb\055\032\072" +
    "\021\075\015\001\002\000\016\012\056\014\053\015\067" +
    "\016\055\017\023\025\247\001\002\000\016\012\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\025\uffd8\001\002\000\004" +
    "\027\251\001\002\000\004\034\252\001\002\000\034\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\012\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\025\ufff8\055\ufff8\072\ufff8\075\ufff8\001" +
    "\002\000\006\017\uffae\024\254\001\002\000\020\004\uffed" +
    "\005\uffed\006\uffed\025\uffed\055\uffed\072\uffed\075\uffed\001" +
    "\002\000\020\004\010\005\011\006\014\025\256\055\032" +
    "\072\021\075\015\001\002\000\004\034\257\001\002\000" +
    "\020\002\ufff0\004\ufff0\005\ufff0\006\ufff0\055\ufff0\072\ufff0" +
    "\075\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\002\004\003\003\001\001\000\016\004" +
    "\016\006\006\007\021\016\015\030\011\031\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\043\001\001\000\010\016\033\021\030\022" +
    "\032\001\001\000\002\001\001\000\004\020\036\001\001" +
    "\000\002\001\001\000\004\020\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\033" +
    "\021\030\022\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\044\001\001\000\002\001\001\000\010" +
    "\006\045\012\046\016\047\001\001\000\002\001\001\000" +
    "\032\013\070\017\056\020\062\024\060\026\067\032\065" +
    "\033\071\034\051\035\057\037\061\040\063\041\064\001" +
    "\001\000\004\020\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\236\015\107\017\105\020\062\023\114\024\060\026\120" +
    "\027\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\056\020" +
    "\076\024\060\032\075\036\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\103\015" +
    "\107\017\105\020\062\023\114\024\060\026\120\027\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\164\015\107\017\105" +
    "\020\062\023\114\024\060\026\120\027\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\156\015\107\017\105\020\062\023" +
    "\114\024\060\026\120\027\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\155\015" +
    "\107\017\105\020\062\023\114\024\060\026\120\027\121" +
    "\001\001\000\022\014\122\015\107\017\105\020\062\023" +
    "\114\024\060\026\120\027\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\154\015\107\017\105\020\062\023\114\024\060" +
    "\026\120\027\121\001\001\000\022\014\153\015\107\017" +
    "\105\020\062\023\114\024\060\026\120\027\121\001\001" +
    "\000\022\014\152\015\107\017\105\020\062\023\114\024" +
    "\060\026\120\027\121\001\001\000\022\014\151\015\107" +
    "\017\105\020\062\023\114\024\060\026\120\027\121\001" +
    "\001\000\022\014\150\015\107\017\105\020\062\023\114" +
    "\024\060\026\120\027\121\001\001\000\022\014\147\015" +
    "\107\017\105\020\062\023\114\024\060\026\120\027\121" +
    "\001\001\000\022\014\146\015\107\017\105\020\062\023" +
    "\114\024\060\026\120\027\121\001\001\000\022\014\145" +
    "\015\107\017\105\020\062\023\114\024\060\026\120\027" +
    "\121\001\001\000\022\014\144\015\107\017\105\020\062" +
    "\023\114\024\060\026\120\027\121\001\001\000\022\014" +
    "\143\015\107\017\105\020\062\023\114\024\060\026\120" +
    "\027\121\001\001\000\022\014\142\015\107\017\105\020" +
    "\062\023\114\024\060\026\120\027\121\001\001\000\022" +
    "\014\141\015\107\017\105\020\062\023\114\024\060\026" +
    "\120\027\121\001\001\000\022\014\140\015\107\017\105" +
    "\020\062\023\114\024\060\026\120\027\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\162\015\107" +
    "\017\105\020\062\023\114\024\060\026\120\027\121\001" +
    "\001\000\004\020\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\056\020\076\024\060\032\075\036\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\172\001\001\000\010\006\045\012\173\016\047\001\001" +
    "\000\032\013\070\017\056\020\062\024\060\026\067\032" +
    "\065\033\071\034\051\035\057\037\061\040\063\041\064" +
    "\001\001\000\002\001\001\000\004\020\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\202\015\107\017\105\020\062\023\114\024\060\025" +
    "\203\026\120\027\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\206\015\107\017\105\020\062\023" +
    "\114\024\060\026\120\027\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\220\015\107\017\105\020" +
    "\062\023\114\024\060\026\120\027\121\001\001\000\022" +
    "\014\217\015\107\017\105\020\062\023\114\024\060\026" +
    "\120\027\121\001\001\000\022\014\216\015\107\017\105" +
    "\020\062\023\114\024\060\026\120\027\121\001\001\000" +
    "\022\014\215\015\107\017\105\020\062\023\114\024\060" +
    "\026\120\027\121\001\001\000\022\014\214\015\107\017" +
    "\105\020\062\023\114\024\060\026\120\027\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\222\015\107" +
    "\017\105\020\062\023\114\024\060\026\120\027\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\225" +
    "\001\001\000\010\006\045\012\226\016\047\001\001\000" +
    "\032\013\070\017\056\020\062\024\060\026\067\032\065" +
    "\033\071\034\051\035\057\037\061\040\063\041\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\232" +
    "\001\001\000\010\006\045\012\233\016\047\001\001\000" +
    "\032\013\070\017\056\020\062\024\060\026\067\032\065" +
    "\033\071\034\051\035\057\037\061\040\063\041\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\241\015\107\017\105\020" +
    "\062\023\114\024\060\026\120\027\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\244\001\001\000" +
    "\010\006\045\012\245\016\047\001\001\000\032\013\070" +
    "\017\056\020\062\024\060\026\067\032\065\033\071\034" +
    "\051\035\057\037\061\040\063\041\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\254\001\001\000\006" +
    "\006\045\016\047\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol curToken) {
    if (curToken.value == null) {
       Errors.fatal(0,0, "SYNTAX ERROR at end of file");
    }
    else {
       MySymbol cur = (MySymbol)curToken;
       Errors.fatal(cur.getLine(), cur.getColumn(),
            "SYNTAX ERROR while reading token " + ((Scanner)this.getScanner()).getTokName(cur.sym) + " ("+ ((Scanner)this.getScanner()).yytext() + ")");
    }
    System.exit(-1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // id ::= ID 
            {
              ID RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arrayExpr ::= loc LSQBRACKET exp RSQBRACKET 
            {
              ArrayExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExpr(l, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // loc ::= loc FULLSTOP id 
            {
              Loc RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccessLoc(l, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // loc ::= arrayExpr 
            {
              Loc RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayExpr a = (ArrayExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // loc ::= id 
            {
              Loc RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= STRUCT id 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StructType(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new CharType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = new DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actualList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 al.addLast(e); RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // actualList ::= exp 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expr> list = new LinkedList<Expr>();
                list.addLast(e);
                RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // callExpr ::= id LPAREN actualList RPAREN 
            {
              CallExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExpr(i, new ActualList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= LPAREN exp RPAREN 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BoundedExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term ::= SIZEOF LPAREN id RPAREN 
            {
              Term RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sizeof(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= callExpr 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpr c = (CallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= NULL 
            {
              Term RESULT =null;
		 RESULT = new Null(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= FALSE 
            {
              Term RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= TRUE 
            {
              Term RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= CHARLITERAL 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharLiteral(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= STRINGLITERAL 
            {
              Term RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= REALLITERAL 
            {
              Term RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealLiteral(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= INTLITERAL 
            {
              Term RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= loc 
            {
              Term RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binaryExpr ::= exp GE_OP exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binaryExpr ::= exp LE_OP exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binaryExpr ::= exp GREATER exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binaryExpr ::= exp LESS exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binaryExpr ::= exp NE_OP exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binaryExpr ::= exp EQUALS exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binaryExpr ::= exp VERTICALBAR exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binaryExpr ::= exp AMPERSAND exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binaryExpr ::= exp PERCENT exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PercentExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binaryExpr ::= exp DIVIDE exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binaryExpr ::= exp TIMES exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binaryExpr ::= exp MINUS exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binaryExpr ::= exp PLUS exp 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unaryExpr ::= MINUS exp 
            {
              UnaryExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusUnaryExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unaryExpr ::= BANG exp 
            {
              UnaryExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unaryExpr ::= AMPERSAND exp 
            {
              UnaryExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddrOfExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= unaryExpr 
            {
              Expr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpr u = (UnaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= binaryExpr 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinaryExpr b = (BinaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // returnStmt ::= RETURN SEMICOLON 
            {
              ReturnStmt RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // returnStmt ::= RETURN exp SEMICOLON 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // whileStmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stm = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmt(e, new VarDeclList(l), new StmtList(stm)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // forInitStmt ::= 
            {
              AssignStmt RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forInitStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // forInitStmt ::= assignStmt 
            {
              AssignStmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forInitStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // forStmt ::= FOR LPAREN forInitStmt SEMICOLON exp SEMICOLON forInitStmt RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              ForStmt RESULT =null;
		int init1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int init1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		AssignStmt init1 = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int init2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int init2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AssignStmt init2 = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stm = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForStmt(init1, e, init2, new VarDeclList(l), new StmtList(stm)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ifElseStmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              IfElseStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList l1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList stm1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stm2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmt(e, new VarDeclList(l1), new StmtList(stm1), new VarDeclList(l2), new StmtList(stm2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifElseStmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifStmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stm = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, new VarDeclList(l), new StmtList(stm)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // callStmt ::= callExpr SEMICOLON 
            {
              CallStmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpr c = (CallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmt(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callStmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignStmt ::= loc DIV_ASSIGN exp 
            {
              AssignStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(l, new DivideExpr(l, e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignStmt ::= loc MUL_ASSIGN exp 
            {
              AssignStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(l, new TimesExpr(l, e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignStmt ::= loc SUB_ASSIGN exp 
            {
              AssignStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(l, new MinusExpr(l, e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignStmt ::= loc ADD_ASSIGN exp 
            {
              AssignStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(l, new PlusExpr(l, e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignStmt ::= loc ASSIGN exp 
            {
              AssignStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Loc l = (Loc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(l, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= callStmt 
            {
              Stmt RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt g = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= returnStmt 
            {
              Stmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt f = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= whileStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt e = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= forStmt 
            {
              Stmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStmt d = (ForStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= ifElseStmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfElseStmt c = (IfElseStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= ifStmt 
            {
              Stmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt b = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= assignStmt SEMICOLON 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmtList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addLast(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varDeclList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addLast(var); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FuncBody RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncBody(new VarDeclList(v), new StmtList(s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcBody",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // structDecl ::= STRUCT id LCURLY varDeclList RCURLY SEMICOLON 
            {
              StructDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StructDecl(i, new VarDeclList(v)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formalDecl ::= type id 
            {
              FormalDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalDecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalsList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT =null;
		int fmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDecl fmd = (FormalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList fml = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fml.addFirst(fmd); RESULT = fml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalsList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalDecl fmd = (FormalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                LinkedList<FormalDecl> list = new LinkedList<FormalDecl>();
                list.addLast(fmd);
                RESULT = list;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formals ::= LPAREN formalsList RPAREN 
            {
              FormalsList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalsList(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcDecl ::= type id formals SEMICOLON 
            {
              FuncDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDecl(t, i, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcDef ::= type id formals funcBody 
            {
              FuncDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncBody body = (FuncBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDef(t, 0, i, f, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDef",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= type id LSQBRACKET INTLITERAL RSQBRACKET SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VarDecl(t, i, new IntLiteral(il)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ID i = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= structDecl 
            {
              Decl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDecl s = (StructDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= funcDecl 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDecl f = (FuncDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= funcDef 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef f = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              Decl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(new DeclList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

